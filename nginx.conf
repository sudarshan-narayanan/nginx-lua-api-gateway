worker_processes  1;

events {
    worker_connections  1024;
}

http {
    lua_shared_dict rate_limit_store 10m;
    lua_shared_dict prometheus_metrics 10m;

    init_worker_by_lua_block {
        local prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter("nginx_http_requests_total", "Total requests", {"method", "path"})
        metric_latency = prometheus:histogram("nginx_http_request_duration_seconds", "Request latency", {"method", "path"})
    }

    server {
        listen 8080;

        location /api/ {
            access_by_lua_file conf/lua/cors.lua;
            access_by_lua_file conf/lua/auth.lua;
            access_by_lua_file conf/lua/rate_limit_redis.lua;
            access_by_lua_file conf/lua/openapi_validator.lua;
            access_by_lua_file conf/lua/request_transform.lua;
            access_by_lua_file conf/lua/prometheus.lua;

            proxy_pass http://backend_service;

            log_by_lua_file conf/lua/logger.lua;
        }

        location /metrics {
            content_by_lua_block {
                local prometheus = require("prometheus").init("prometheus_metrics")
                prometheus:collect()
            }
        }
    }

    upstream backend_service {
        server localhost:3000;
    }
}


server {
    listen 8081;

    location /swagger/ {
        root html;
        index index.html;
    }
}
